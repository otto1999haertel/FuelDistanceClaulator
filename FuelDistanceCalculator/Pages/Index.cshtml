@page
@using FuelDistanceCalculator.Constants
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<div class="text-center">
    <h1 class="display-4">Willkommen beim Fuel Distance Calculator</h1>
    <p>Berechne und vergleiche die Gesamtkosten zwischen zwei Tankstellen</p>
</div>

<div class="container">
    <form method="post">
        <div class="row justify-content-center">
            <!-- Eingabefelder für globale Werte - mittig zentriert -->
            <div class="col-md-6">
                <h3>Globale Eingabewerte</h3>

                <!-- Dropdown für Spritart -->
                <div class="form-group">
                    <label for="FuelType">Spritart</label>
                    <select class="form-control" id="FuelType" name="SelectedFuelType" asp-for="SelectedFuelType" 
                        asp-items="@(FuelTypeHelper.FuelTypeNames.Select(kvp => new SelectListItem 
                        { 
                            Value = kvp.Key.ToString(), 
                            Text = kvp.Value 
                        }))">
                    </select>
                </div>

                <!-- Eingabe für Tankmenge -->
                <div class="form-group">
                    <label for="fuelAmount">Tankmenge (@Model.VolumeUnit)</label>
                    <input type="text" id="FuelAmountDisplay" class="form-control" required onblur="calculateAndStore(this)" value="@Model.FuelAmount" />
                    <input type="hidden" id="FuelAmount" name="FuelAmount" value="@Model.FuelAmount" />

                    <script>
                    </script>

                </div>

                <!-- Preis pro Kilometer -->
                <div class="form-group">
                    <label for="pricePerKm">Preis pro Kilometer</label>
                    <input type="number" step="0.01" id="PricePerKm" name="pricePerKm" class="form-control" required asp-for="PricePerKm" value="@Model.PricePerKm"/>
                </div>
            </div>
        </div>

       <div class="form-group d-flex justify-content-center">
        <label>
            <input type="radio" name="SelectInputMode" id="autoInput" value="Auto" @(Model.SelectInputMode == InputMode.auto ? "checked" : "") onchange="toggleInputMethod(this)"> Optimale Suchen
        </label>
        <label>
            <input type="radio" name="SelectInputMode" id="manualInput" value="Manual" @(Model.SelectInputMode == InputMode.man ? "checked" : "") onchange="toggleInputMethod(this)"> Manuelle Eingabe
        </label>
    </div>

        <!-- Manuelle Eingabe (wird ausgeblendet, wenn Automatische Auswahl gewählt wird) -->
         <div id="manualInputFields" style="display:@(Model.SelectInputMode == InputMode.man ? "block" : "none")">
            <div class="row">
                <!-- Tankstelle 1 Eingabefelder - links ausgerichtet -->
                <div class="col-md-5 offset-md-1">
                    <h4>
                        <input type="text" id="NameGasStation1" name="NameGasStation1" class="form-control" 
                        placeholder="Tankstelle 1" value="@Model.NameGasStation1" 
                        asp-for="NameGasStation1" onblur="updateModelValueTS1(this)" />
                    </h4>
                    <div class="form-group">
                        <label for="fuelPrice1">Preis an der @Model.NameGasStation1 (€/@Model.VolumeUnit)</label>
                        <input type="number" step="0.01" id="FuelPrice1" name="FuelPrice1" class="form-control" required asp-for="FuelPrice1" value="@Model.FuelPrice1"/>
                    </div>
                    <div class="form-group">
                        <label for="distance1">Entfernung der @Model.NameGasStation1 (km)</label>
                        <input type="number" step="0.1" id="Distance1" name="Distance1" class="form-control" required asp-for="Distance1" value="@Model.Distance1" />
                    </div>
                </div>

                <!-- Tankstelle 2 Eingabefelder - rechts ausgerichtet -->
                <div class="col-md-5">
                    <h4>
                        <input type="text" id="NameGasStation2" name="NameGasStation2" class="form-control" 
                        placeholder="Tankstelle 2" value="@Model.NameGasStation2" 
                        asp-for="NameGasStation2" onblur="updateModelValueTS2(this)" />
                    </h4>
                    <div class="form-group">
                        <label for="fuelPrice2">Preis an der @Model.NameGasStation2 (€/@Model.VolumeUnit)</label>
                        <input type="number" step="0.01" id="FuelPrice2" name="FuelPrice2" class="form-control" required asp-for="FuelPrice2" value="@Model.FuelPrice2" />
                    </div>
                    <div class="form-group">
                        <label for="distance2">Entfernung der @Model.NameGasStation2 (km)</label>
                        <input type="number" step="0.1" id="Distance2" name="Distance2" class="form-control" required asp-for="Distance2" value="@Model.Distance2" />
                    </div>
                </div>
            </div>
            <!-- Berechnen-Button -->
             <div class="row justify-content-center mt-3">
           <button type="submit" class="btn btn-primary mx-2" 
                style="width: 120px" asp-page-handler="CalculateTotalCost">
                 Berechnen
            </button>


            <!-- Speichern-Button -->
            @if(GlobalState.IsNotPublic)
            {
                <button type="submit" class="btn btn-primary mx-2" style="width: 120px" 
                    asp-page-handler="Save" 
                    disabled="@(!Model.CalculationSucessful)">
                Speichern
            </button>
            }
        </div>
        </div>

        <!-- Automatische Auswahl (wird angezeigt, wenn Automatische Auswahl gewählt wird) -->
        <div id="autoInputFields" style="display:@(Model.SelectInputMode == InputMode.auto ? "block" : "none")">
        <!-- Automatische Eingabe für Standort und Radius -->
            <div class="row">
                <div class="col-md-5 offset-md-1">
                    <label for="generalLocation">Standort (PLZ/ Ort)</label>
                    <input type="text" id="generalLocation" class="form-control" placeholder="Geben Sie einen Ort ein" required asp-for="Place" value="@Model.Place">
                </div>
                <div class="col-md-5">
                    <label for="generalRadius">Radius (in km)</label>
                    <input type="number" id="generalRadius" class="form-control" placeholder="Radius in km" min="1" required asp-for="Radius" value="@Model.Radius">
                </div>
            </div>
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-primary mx-2" style="width: 120px" asp-page-handler="Search">Suchen</button>
            </div>
            <div class="row justify-content-center">
            <div class="col-md-6">
                 @if (Model.CheapestResultStations.Any())
                 {
                    <ul class="station-list">
                     @foreach (var station in Model.CheapestResultStations)
                    {
                        <li class="station-item">
                        <div class="station-summary" onclick="toggleDetails(this)">
                            <strong>@station.Name</strong> - Gesamtkosten: 
                             @((station.CalculateTotalCost(@Model.FuelAmount, @Model.PricePerKm))) €
                            </div>
                            <div class="station-details" style="display:none;">
                            <p>Einzelpreis pro Liter: @station.Price €</p>
                            <p>Entfernung: @station.Distance km</p>
                            <p>Ort: </p>
                            <a href="https://www.google.com/maps?q=@station.Place,@station.Street+@station.HouseNumber" target="_blank">
                                   @station.Place, @station.Street @station.HouseNumber
                            </a>

                        </div>
                         </li>
                    }
                    </ul>
                }
                else
                {
                 <p>Keine offenen Tankstellen im Radius gefunden.</p>
                 }
            </div>
            </div>

        </div>

        <!-- JavaScript für die Eingabe-Auswahl-Steuerung -->
<script>
     function updateModelValueTS1(input) {
                // Wenn der Benutzer das Feld verlässt und nichts eingegeben hat, verwende den Platzhalter als Standard
                    if (!input.value.trim()) {
                 input.value = input.placeholder;  // Falls leer, setze den Platzhalterwert
                }

                // Aktualisiere das Modell im Hintergrund
                var nameGasStationField = document.querySelector('input[name="NameGasStation1"]');
                if (nameGasStationField) {
                 nameGasStationField.value = input.value;  // Das Modell im Hintergrund aktualisieren
                }

                // Aktualisiere das Label für den Preis an der Tankstelle
                var label = document.querySelector("label[for='fuelPrice1']");
                if (label) {
                    var name = document.querySelector('input[name="NameGasStation1"]').value;
                    label.innerHTML = 'Preis an der ' + (name || "Tankstelle 1") + ' (€/@Model.VolumeUnit)';
                }
                label = document.querySelector("label[for='distance1']");
                if (label) {
                    var name = document.querySelector('input[name="NameGasStation1"]').value;
                    label.innerHTML = 'Entfernung der ' + (name || "Tankstelle 1") + ' (km)';
                }
                }    




                function updateModelValueTS2(input) {
                // Wenn der Benutzer das Feld verlässt und nichts eingegeben hat, verwende den Platzhalter als Standard
                    if (!input.value.trim()) {
                 input.value = input.placeholder;  // Falls leer, setze den Platzhalterwert
                }

                // Aktualisiere das Modell im Hintergrund
                var nameGasStationField = document.querySelector('input[name="NameGasStation2"]');
                if (nameGasStationField) {
                 nameGasStationField.value = input.value;  // Das Modell im Hintergrund aktualisieren
                }

                // Aktualisiere das Label für den Preis an der Tankstelle
                var label = document.querySelector("label[for='fuelPrice2']");
                if (label) {
                    var name = document.querySelector('input[name="NameGasStation2"]').value;
                    label.innerHTML = 'Preis an der ' + (name || "Tankstelle 2") + ' (€/@Model.VolumeUnit)';
                }
                label = document.querySelector("label[for='distance2']");
                if (label) {
                    var name = document.querySelector('input[name="NameGasStation2"]').value;
                    label.innerHTML = 'Entfernung der ' + (name || "Tankstelle 2") + ' (km)';
                }
                }
                function calculateAndStore(input) {
                         try {
                         let expression = input.value.replace(",", "."); // Ersetze Komma durch Punkt
                        if (/^[0-9+\-*/().\s]*$/.test(expression)) {
                            let result = eval(expression); // Berechne den Ausdruck
                        if (!isNaN(result)) {
                        input.value = result; // Zeige das Ergebnis im Eingabefeld an
                            document.getElementById("FuelAmount").value = result; // Speichere das Ergebnis im versteckten Feld für das Model
                        }
                        }
                     } catch (e) {
                    console.error("Ungültiger Ausdruck:", e);
                            }
                }
                function calculateAndStore(input) {
                            try {
                                let expression = input.value.replace(",", "."); // Ersetze Komma durch Punkt
                                if (/^[0-9+\-*/().\s]*$/.test(expression)) {
                                    let result = eval(expression); // Berechne den Ausdruck
                                    if (!isNaN(result)) {
                                        input.value = result; // Zeige das Ergebnis im Eingabefeld an
                                        document.getElementById("FuelAmount").value = result; // Speichere das Ergebnis im versteckten Feld für das Model
                                    }
                                }
                            } catch (e) {
                                console.error("Ungültiger Ausdruck:", e);
                            }
                }
                navigator.geolocation.getCurrentPosition(function(position) {
        var lat = position.coords.latitude;
        var lon = position.coords.longitude;
        loadNearbyStations(lat, lon);
    });

    // Beispielhafte Tankstellen API (z.B. Google Places API)
    function loadNearbyStations(lat, lon) {
        // Beispiel-Daten für Tankstellen
        var stations = [
            { name: "Tankstelle 1", price: 1.50, distance: 2.5 },
            { name: "Tankstelle 2", price: 1.55, distance: 3.0 },
            { name: "Tankstelle 3", price: 1.45, distance: 1.2 },
            { name: "Tankstelle 4", price: 1.60, distance: 4.5 },
            { name: "Tankstelle 5", price: 1.58, distance: 5.0 }
        ];

        // Stationen in die Listen einfügen
        var list1 = document.getElementById("tankStationList1");
        var list2 = document.getElementById("tankStationList2");
        
        stations.forEach(function(station) {
            var option1 = document.createElement("div");
            option1.classList.add("list-item");
            option1.textContent = station.name + " - " + station.price + " €";
            option1.onclick = function() {
                document.getElementById("NameGasStation1").value = station.name;
                document.getElementById("FuelPrice1").value = station.price;
                document.getElementById("Distance1").value = station.distance;
            };
            list1.appendChild(option1);

            var option2 = document.createElement("div");
            option2.classList.add("list-item");
            option2.textContent = station.name + " - " + station.price + " €";
            option2.onclick = function() {
                document.getElementById("NameGasStation2").value = station.name;
                document.getElementById("FuelPrice2").value = station.price;
                document.getElementById("Distance2").value = station.distance;
            };
            list2.appendChild(option2);
        });
    }
    function toggleInputMethod(radio) {
    var manualFields = document.getElementById("manualInputFields");
    var autoFields = document.getElementById("autoInputFields");

    if (radio.value === "Manual") {
        manualFields.style.display = "block";
        autoFields.style.display = "none";
    } else {
        manualFields.style.display = "none";
        autoFields.style.display = "block";
    }
}
function toggleDetails(element) {
        // Holen des Elements, das die Details enthält
        var details = element.nextElementSibling;
        
        // Wenn die Details sichtbar sind, verstecke sie, sonst zeige sie an
        if (details.style.display === "none" || details.style.display === "") {
            details.style.display = "block";
        } else {
            details.style.display = "none";
        }
    }
</script>
        <div class="row justify-content-center mt-3">
        <div class="d-flex justify-content-center">
         </div>
         </div>
    </form>
</div>
<!-- Berechnungen oder Ergebnisse - unter dem Berechnen Button -->
    @if (Model.CalculationSucessful)
    {
        <div class="mt-4 text-center">
            <h4>Ergebnisse:</h4>
            <p>@Model.NameGasStation1 -  Gesamtkosten: @Model.TotalCost1.ToString("0.00") €</p>
            <p>@Model.NameGasStation2 -  Gesamtkosten: @Model.TotalCost2.ToString("0.00") €</p>
            @if(Model.BreakEvenAnalysisDeterministic){
                if((int)Model.FuelAmountBreakEven>0){
                      <p>Break-Even Analyse: ab einer Tankmenge von <strong>@Model.FuelAmountBreakEven.ToString("0.00") </strong> l ist <strong>@Model.NameGasStationBreakEven</strong> günstiger</p>
                }
                else{
                    <p>Break-Even Analyse: <strong>@Model.NameGasStationBreakEven</strong> ist sofort günstoger</p>
                }
          
            }
        </div>
    }
