@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<div class="text-center">
    <h1 class="display-4">Willkommen beim Fuel Distance Calculator</h1>
    <p>Berechne und vergleiche die Gesamtkosten zwischen zwei Tankstellen</p>
</div>

<div class="container">
    <form method="post">
        <div class="row justify-content-center">
            <!-- Eingabefelder für globale Werte - mittig zentriert -->
            <div class="col-md-6">
                <h3>Globale Eingabewerte</h3>

                <!-- Dropdown für Spritart -->
               <div class="form-group">
                    <label for="FuelType">Spritart</label>
                    <select class="form-control" id="FuelType" name="SelectedFuelType" asp-for="SelectedFuelType" 
                        asp-items="@(FuelTypeHelper.FuelTypeNames.Select(kvp => new SelectListItem 
                        { 
                            Value = kvp.Key.ToString(), 
                            Text = kvp.Value 
                        }))">
                    </select>

                </div>




                <div class="form-group">
                    <label for="fuelAmount">Tankmenge (@Model.VolumeUnit)</label>
                    <input type="text" id="FuelAmountDisplay" class="form-control" required onblur="calculateAndStore(this)" value="@Model.FuelAmount" />
                    <input type="hidden" id="FuelAmount" name="FuelAmount" value="@Model.FuelAmount" />

                    <script>
                    function calculateAndStore(input) {
                         try {
                         let expression = input.value.replace(",", "."); // Ersetze Komma durch Punkt
                        if (/^[0-9+\-*/().\s]*$/.test(expression)) {
                            let result = eval(expression); // Berechne den Ausdruck
                        if (!isNaN(result)) {
                        input.value = result; // Zeige das Ergebnis im Eingabefeld an
                            document.getElementById("FuelAmount").value = result; // Speichere das Ergebnis im versteckten Feld für das Model
                        }
                        }
                     } catch (e) {
                    console.error("Ungültiger Ausdruck:", e);
                            }
                        }
                    </script>

                </div>
                <div class="form-group">
                    <label for="pricePerKm">Preis pro Kilometer</label>
                    <input type="number" step="0.01" id="PricePerKm" name="pricePerKm" class="form-control" required asp-for="PricePerKm" value="@Model.PricePerKm"/>
                </div>
            </div>
        </div>


        <div class="row">
            <!-- Tankstelle 1 Eingabefelder - links ausgerichtet -->
            <div class="col-md-5 offset-md-1">
                <h3>
                    <input type="text" id="NameGasStation1" name="NameGasStation1" class="form-control" 
                     placeholder="Tankstelle 1" value="@Model.NameGasStation1" 
                    asp-for="NameGasStation1" onblur="updateModelValueTS1(this)"/>
                </h3>
                <div class="form-group">
                    <label for="fuelPrice1">Preis an der @Model.NameGasStation1 (€/@Model.VolumeUnit)</label>
                    <input type="number" step="0.01" id="FuelPrice1" name="FuelPrice1" class="form-control" required asp-for="FuelPrice1" value="@Model.FuelPrice1"/>
                </div>
                <div class="form-group">
                    <label for="distance1">Entfernung der @Model.NameGasStation1 (km)</label>
                    <input type="number" step="0.1" id="Distance1" name="Distance1" class="form-control" required asp-for="Distance1" value="@Model.Distance1" />
                </div>
            </div>
            <!-- Tankstelle 2 Eingabefelder - rechts ausgerichtet -->
            <div class="col-md-5 custom-col col-12">
                <h3>
                    <input type="text" id="NameGasStation2" name="NameGasStation2" class="form-control" 
                     placeholder="Tankstelle 2" value="@Model.NameGasStation2" 
                    asp-for="NameGasStation2" onblur="updateModelValueTS2(this)"/>
                </h3>
                <div class="form-group">
                    <label for="fuelPrice2">Preis an der @Model.NameGasStation2 (€/@Model.VolumeUnit)</label>
                    <input type="number" step="0.01" id="FuelPrice2" name="FuelPrice2" class="form-control" required asp-for="FuelPrice2" value="@Model.FuelPrice2" />
                </div>
                <div class="form-group">
                    <label for="distance2">Entfernung der @Model.NameGasStation2  (km)</label>
                    <input type="number" step="0.1" id="Distance2" name="Distance2" class="form-control" required asp-for="Distance2" value="@Model.Distance2" />
                </div>
            </div>

            <script>
                function updateModelValueTS1(input) {
                // Wenn der Benutzer das Feld verlässt und nichts eingegeben hat, verwende den Platzhalter als Standard
                    if (!input.value.trim()) {
                 input.value = input.placeholder;  // Falls leer, setze den Platzhalterwert
                }

                // Aktualisiere das Modell im Hintergrund
                var nameGasStationField = document.querySelector('input[name="NameGasStation1"]');
                if (nameGasStationField) {
                 nameGasStationField.value = input.value;  // Das Modell im Hintergrund aktualisieren
                }

                // Aktualisiere das Label für den Preis an der Tankstelle
                var label = document.querySelector("label[for='fuelPrice1']");
                if (label) {
                    var name = document.querySelector('input[name="NameGasStation1"]').value;
                    label.innerHTML = 'Preis an der ' + (name || "Tankstelle 1") + ' (€/@Model.VolumeUnit)';
                }
                label = document.querySelector("label[for='distance1']");
                if (label) {
                    var name = document.querySelector('input[name="NameGasStation1"]').value;
                    label.innerHTML = 'Entfernung der ' + (name || "Tankstelle 1") + ' (km)';
                }
                }    




                function updateModelValueTS2(input) {
                // Wenn der Benutzer das Feld verlässt und nichts eingegeben hat, verwende den Platzhalter als Standard
                    if (!input.value.trim()) {
                 input.value = input.placeholder;  // Falls leer, setze den Platzhalterwert
                }

                // Aktualisiere das Modell im Hintergrund
                var nameGasStationField = document.querySelector('input[name="NameGasStation2"]');
                if (nameGasStationField) {
                 nameGasStationField.value = input.value;  // Das Modell im Hintergrund aktualisieren
                }

                // Aktualisiere das Label für den Preis an der Tankstelle
                var label = document.querySelector("label[for='fuelPrice2']");
                if (label) {
                    var name = document.querySelector('input[name="NameGasStation2"]').value;
                    label.innerHTML = 'Preis an der ' + (name || "Tankstelle 2") + ' (€/@Model.VolumeUnit)';
                }
                label = document.querySelector("label[for='distance2']");
                if (label) {
                    var name = document.querySelector('input[name="NameGasStation2"]').value;
                    label.innerHTML = 'Entfernung der ' + (name || "Tankstelle 2") + ' (km)';
                }
                }
                
            </script>



        </div>
        <div class="row justify-content-center mt-3">
        <div class="d-flex justify-content-center">
        <!-- Berechnen-Button -->
        <button type="submit" class="btn btn-primary mx-2" style="width: 120px" asp-page-handler="CalculateTotalCost">
            Berechnen
        </button>

        <!-- Speichern-Button -->
        @if(GlobalState.IsNotPublic)
{
        <button type="submit" class="btn btn-primary mx-2" style="width: 120px" 
            asp-page-handler="Save" 
             disabled="@(!Model.CalculationSucessful)">
        Speichern
    </button>
}



    </div>

    </form>
</div>

</div>


    <!-- Berechnungen oder Ergebnisse - unter dem Berechnen Button -->
    @if (Model.CalculationSucessful)
    {
        <div class="mt-4 text-center">
            <h4>Ergebnisse:</h4>
            <p>@Model.NameGasStation1 -  Gesamtkosten: @Model.TotalCost1.ToString("0.00") €</p>
            <p>@Model.NameGasStation2 -  Gesamtkosten: @Model.TotalCost2.ToString("0.00") €</p>
            @if(Model.BreakEvenAnalysisDeterministic){
                if((int)Model.FuelAmountBreakEven>0){
                      <p>Break-Even Analyse: ab einer Tankmenge von <strong>@Model.FuelAmountBreakEven.ToString("0.00") </strong> l ist <strong>@Model.NameGasStationBreakEven</strong> günstiger</p>
                }
                else{
                    <p>Break-Even Analyse: <strong>@Model.NameGasStationBreakEven</strong> ist sofort günstoger</p>
                }
          
            }
        </div>
    }
</div>

<div id="errorToast" style="
    display: none;
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: red;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);">
    <span id="errorMessage"></span>
</div>

@if (TempData["Message"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var toast = document.getElementById("errorToast");
            var message = "@TempData["Message"]";
            document.getElementById("errorMessage").innerText = message;
            toast.style.display = "block";

            // Toast nach 5 Sekunden ausblenden
            setTimeout(function() {
                toast.style.display = "none";
            }, 5000);
        });
    </script>
}